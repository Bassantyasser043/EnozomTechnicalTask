// <auto-generated />
using System;
using DoctorAvailabiltity.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAvailabiltity.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240930130523_intialCreated")]
    partial class intialCreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.Day", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DayId");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            DayId = 1,
                            DayName = "Sunday"
                        },
                        new
                        {
                            DayId = 2,
                            DayName = "Munday"
                        },
                        new
                        {
                            DayId = 3,
                            DayName = "TuesDay"
                        },
                        new
                        {
                            DayId = 4,
                            DayName = "Wednesday"
                        },
                        new
                        {
                            DayId = 5,
                            DayName = "Thursday"
                        },
                        new
                        {
                            DayId = 6,
                            DayName = "Friday"
                        },
                        new
                        {
                            DayId = 7,
                            DayName = "Saturday"
                        });
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DoctorName = "Mohamed"
                        },
                        new
                        {
                            DoctorId = 2,
                            DoctorName = "Ahmed"
                        });
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.DoctorAvailability", b =>
                {
                    b.Property<int>("DoctorAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("TimeRangeId")
                        .HasColumnType("int");

                    b.HasKey("DoctorAvailabilityId");

                    b.HasIndex("DayId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TimeRangeId");

                    b.ToTable("DoctorAvailabilities");

                    b.HasData(
                        new
                        {
                            DoctorAvailabilityId = 1,
                            DayId = 2,
                            DoctorId = 1,
                            TimeRangeId = 1
                        },
                        new
                        {
                            DoctorAvailabilityId = 2,
                            DayId = 2,
                            DoctorId = 1,
                            TimeRangeId = 2
                        },
                        new
                        {
                            DoctorAvailabilityId = 3,
                            DayId = 3,
                            DoctorId = 1,
                            TimeRangeId = 1
                        },
                        new
                        {
                            DoctorAvailabilityId = 4,
                            DayId = 3,
                            DoctorId = 1,
                            TimeRangeId = 2
                        },
                        new
                        {
                            DoctorAvailabilityId = 5,
                            DayId = 3,
                            DoctorId = 1,
                            TimeRangeId = 3
                        },
                        new
                        {
                            DoctorAvailabilityId = 6,
                            DayId = 4,
                            DoctorId = 1,
                            TimeRangeId = 1
                        },
                        new
                        {
                            DoctorAvailabilityId = 7,
                            DayId = 4,
                            DoctorId = 1,
                            TimeRangeId = 2
                        },
                        new
                        {
                            DoctorAvailabilityId = 8,
                            DayId = 5,
                            DoctorId = 1,
                            TimeRangeId = 2
                        },
                        new
                        {
                            DoctorAvailabilityId = 9,
                            DayId = 6,
                            DoctorId = 1,
                            TimeRangeId = 1
                        },
                        new
                        {
                            DoctorAvailabilityId = 10,
                            DayId = 2,
                            DoctorId = 2,
                            TimeRangeId = 4
                        },
                        new
                        {
                            DoctorAvailabilityId = 11,
                            DayId = 3,
                            DoctorId = 2,
                            TimeRangeId = 1
                        },
                        new
                        {
                            DoctorAvailabilityId = 12,
                            DayId = 3,
                            DoctorId = 2,
                            TimeRangeId = 3
                        },
                        new
                        {
                            DoctorAvailabilityId = 13,
                            DayId = 5,
                            DoctorId = 2,
                            TimeRangeId = 2
                        },
                        new
                        {
                            DoctorAvailabilityId = 14,
                            DayId = 6,
                            DoctorId = 2,
                            TimeRangeId = 1
                        });
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.TimeRange", b =>
                {
                    b.Property<int>("TimeRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time(6)");

                    b.HasKey("TimeRangeId");

                    b.ToTable("TimeRanges");

                    b.HasData(
                        new
                        {
                            TimeRangeId = 1,
                            From = new TimeSpan(0, 9, 0, 0, 0),
                            To = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            TimeRangeId = 2,
                            From = new TimeSpan(0, 14, 0, 0, 0),
                            To = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            TimeRangeId = 3,
                            From = new TimeSpan(0, 20, 0, 0, 0),
                            To = new TimeSpan(0, 21, 0, 0, 0)
                        },
                        new
                        {
                            TimeRangeId = 4,
                            From = new TimeSpan(0, 9, 0, 0, 0),
                            To = new TimeSpan(0, 17, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.DoctorAvailability", b =>
                {
                    b.HasOne("DoctorAvailabiltity.Repository.Entities.Day", "Day")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAvailabiltity.Repository.Entities.Doctor", "Doctor")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAvailabiltity.Repository.Entities.TimeRange", "TimeRanges")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("TimeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Doctor");

                    b.Navigation("TimeRanges");
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.Day", b =>
                {
                    b.Navigation("DoctorAvailabilities");
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorAvailabilities");
                });

            modelBuilder.Entity("DoctorAvailabiltity.Repository.Entities.TimeRange", b =>
                {
                    b.Navigation("DoctorAvailabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
